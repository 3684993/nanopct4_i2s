name: Build Ubuntu Focal Image (RK3399)

on:
  workflow_dispatch:

env:
  CUSTOM_DTS: dts/rk3399-nanopi4-rev00.dts

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 下载 Workflow A 上传的 rootfs artifact
      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-rootfs
          path: ./rootfs

      # 3. 解压 rootfs
      - name: Extract rootfs
        run: |
          unzip -q rootfs/ubuntu-rootfs.zip -d rootfs/
          ls -lh rootfs/

      # 4. 自动检测 rootfs 目录
      - name: Detect rootfs directory
        id: detect-rootfs
        run: |
          ROOTFS_DIR=$(ls -d rootfs/*ubuntu-focal-desktop*/ | head -n1 | sed 's#/##')
          if [ -z "$ROOTFS_DIR" ]; then
            echo "❌ ERROR: 未找到 ubuntu-focal-desktop rootfs 目录"
            exit 1
          fi
          echo "rootfs_dir=$ROOTFS_DIR" >> $GITHUB_OUTPUT
          echo "✅ Found rootfs directory: $ROOTFS_DIR"

      # 5. Clone sd-fuse_rk3399
      - name: Clone sd-fuse_rk3399
        run: |
          git clone https://github.com/friendlyarm/sd-fuse_rk3399.git -b kernel-4.19
          mkdir -p sd-fuse_rk3399/out

      # 6. Clone kernel
      - name: Clone kernel
        run: |
          git clone https://github.com/friendlyarm/kernel-rockchip --depth 1 -b nanopi4-v4.19.y kernel-rk3399
          if [ ! -d "kernel-rk3399/arch/arm64/boot/dts/rockchip" ]; then
            echo "❌ ERROR: Kernel DTS folder not found!"
            exit 1
          fi

      # 7. 覆盖自定义 DTS
      - name: Copy custom DTS
        run: |
          cp $GITHUB_WORKSPACE/${CUSTOM_DTS} kernel-rk3399/arch/arm64/boot/dts/rockchip/

      # 8. Build Kernel
      - name: Build Kernel
        run: |
          KERNEL_SRC=$PWD/kernel-rk3399 ./sd-fuse_rk3399/build-kernel.sh ${{ steps.detect-rootfs.outputs.rootfs_dir }}

      # 9. Build Kernel headers
      - name: Build Kernel headers
        run: |
          MK_HEADERS_DEB=1 BUILD_THIRD_PARTY_DRIVER=0 \
          KERNEL_SRC=$PWD/kernel-rk3399 ./sd-fuse_rk3399/build-kernel.sh ${{ steps.detect-rootfs.outputs.rootfs_dir }}

      # 10. Build U-Boot
      - name: Build U-Boot
        run: |
          git clone https://github.com/friendlyarm/uboot-rockchip --depth 1 -b nanopi4-v2017.09 uboot-rockchip
          UBOOT_SRC=$PWD/uboot-rockchip ./sd-fuse_rk3399/build-uboot.sh ${{ steps.detect-rootfs.outputs.rootfs_dir }}

      # 11. Build SD image
      - name: Build final SD image
        run: |
          cd sd-fuse_rk3399
          ./mk-sd-image.sh ${{ steps.detect-rootfs.outputs.rootfs_dir }}
          ls -lh out/

      # 12. Upload SD image artifact
      - name: Upload SD image
        uses: actions/upload-artifact@v4
        with:
          name: rk3399-sd-image
          path: sd-fuse_rk3399/out/*.img
