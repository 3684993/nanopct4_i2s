name: Test2 Kernel Build

on:
  workflow_dispatch:

env:
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-gnu-
  KERNEL_DEFCONFIG: rockchip_linux_defconfig
  OUTPUT_DIR: ${{ github.workspace }}/build_out
  DTS_FILE: arch/arm64/boot/dts/rockchip/rk3399-nanopi4-rev00.dts
  LOCALVERSION: ""
  KERNEL_REPO: https://github.com/rockchip-linux/kernel
  KERNEL_BRANCH: develop-4.19-rt87

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \
            bison flex libssl-dev \
            libncurses5-dev \
            device-tree-compiler \
            curl git u-boot-tools

      - name: Remove old kernel source and output
        run: |
          rm -rf kernel
          rm -rf "${{ env.OUTPUT_DIR }}"

      - name: Clone kernel source
        run: |
          git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPO kernel

      - name: Copy custom DTS (if exists)
        run: |
          if [ -f dts/rk3399-nanopi4-rev00.dts ]; then
            echo "Replacing DTS with custom version..."
            cp dts/rk3399-nanopi4-rev00.dts kernel/arch/arm64/boot/dts/rockchip/rk3399-nanopi4-rev00.dts
          else
            echo "Using default DTS from kernel repo."
          fi

      - name: Compile kernel
        run: |
          set -euo pipefail
          cd kernel
          echo "Cleaning previous build..."
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE mrproper

          echo "Using defconfig: $KERNEL_DEFCONFIG"
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE $KERNEL_DEFCONFIG
          make -j$(nproc) O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE Image dtbs modules

      - name: Install modules
        run: |
          set -euo pipefail
          cd kernel
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE modules_install INSTALL_MOD_PATH="${{ env.OUTPUT_DIR }}/rootfs"

      - name: Inspect build outputs (debug)
        run: |
          echo "Listing output directory:"
          ls -la "${{ env.OUTPUT_DIR }}"
          echo "Listing kernel artifacts:"
          ls -la "${{ env.OUTPUT_DIR }}/arch/arm64/boot" || true
          echo "Listing dtbs rockchip folder:"
          ls -la "${{ env.OUTPUT_DIR }}/arch/arm64/boot/dts/rockchip" || true

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: ${{ env.OUTPUT_DIR }}
