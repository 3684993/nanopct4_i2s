name: Test INMP441 64M

on:
  workflow_dispatch:

env:
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-gnu-
  KERNEL_DEFCONFIG: rockchip_linux_defconfig
  OUTPUT_DIR: ${{ github.workspace }}/rockchipoutput
  DTS_FILE: arch/arm64/boot/dts/rockchip/rk3399-nanopi4-rev00.dts
  LOCALVERSION: ""
  BOOT_IMG: ${{ github.workspace }}/output/boot.img

  KERNEL_REPO: https://github.com/rockchip-linux/kernel
  KERNEL_BRANCH: develop-4.19-rt87

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean output directory
        run: rm -rf "${{ env.OUTPUT_DIR }}"

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \
            bison flex libssl-dev \
            libncurses5-dev \
            device-tree-compiler \
            curl git u-boot-tools

      - name: Clone kernel source
        run: git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPO kernel

      - name: Setup output directory
        run: mkdir -p "${{ env.OUTPUT_DIR }}"

      - name: Copy custom DTS
        run: |
          if [ -f dts/rk3399-nanopi4-rev00.dts ]; then
            cp dts/rk3399-nanopi4-rev00.dts kernel/arch/arm64/boot/dts/rockchip/rk3399-nanopi4-rev00.dts
          fi

      - name: Compile kernel
        run: |
          cd kernel
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE mrproper
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE $KERNEL_DEFCONFIG

          # 禁用 bcmdhd 驱动
          scripts/config --disable CONFIG_BCMDHD
          scripts/config --disable CONFIG_BCMDHD_FW
          scripts/config --disable CONFIG_BCMDHD_DEBUG

          make -j$(nproc) O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE Image dtbs modules

      - name: Install modules
        run: |
          cd kernel
          make O="${{ env.OUTPUT_DIR }}" ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE modules_install INSTALL_MOD_PATH="${{ env.OUTPUT_DIR }}/rootfs"

      - name: Create 64MB boot.img
        env:
          WORK_DIR: ${{ env.OUTPUT_DIR }}
          BOOT_IMG: ${{ env.BOOT_IMG }}
        run: |
          set -euo pipefail
          mkdir -p "${WORK_DIR}/boot"
          cp "${WORK_DIR}/arch/arm64/boot/Image" "${WORK_DIR}/boot/"
          cp "${WORK_DIR}/arch/arm64/boot/dts/rockchip/rk3399-nanopi4-rev00.dtb" "${WORK_DIR}/boot/"

          # 生成固定大小64MB boot.img
          dd if=/dev/zero of="${BOOT_IMG}" bs=1M count=64
          mkfs.vfat "${BOOT_IMG}"
          sudo mount -o loop "${BOOT_IMG}" /mnt
          sudo cp "${WORK_DIR}/boot/"* /mnt/
          sync
          sudo umount /mnt
          ls -lh "${BOOT_IMG}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: ${{ env.BOOT_IMG }}
