name: Final Build RK3399 Image
on:
  workflow_dispatch:

env:
  ROOTFS_TGZ_ID: 1LgmYqwXrX6O8YGxgIN9mS9upcOMnpIT5
  ROOTFS_TGZ_FILE: ubuntu-focal-desktop-arm64-images.tgz
  ROOTFS_DIR_NAME: ubuntu-focal-desktop-arm64
  CUSTOM_DTS: dts/rk3399-nanopi4-rev00.dts

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 作为 fallback，脚本里也会设置 CROSS_COMPILE 到 GITHUB_ENV
      ARCH: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install apt dependencies (common)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            git wget curl unzip bc python3-pip python3 \
            build-essential device-tree-compiler bison flex libssl-dev \
            make ncurses-dev gawk tar xz-utils cpio rsync file aria2
          pip3 install --upgrade pip
          pip3 install gdown

      # -------------------------
      # 安装并配置 FriendlyARM prebuilts toolchain (11.3-aarch64)
      # 这一步确保 aarch64-gcc-11.3 可用，并创建兼容的 aarch64-linux-gnu-* 名称。
      # -------------------------
      - name: Install FriendlyARM prebuilts toolchain and create symlinks
        run: |
          set -euo pipefail
          # clone并解压官方预编译交叉编译器到根目录（会解出 /opt/FriendlyARM/toolchain/...）
          rm -rf prebuilts || true
          git clone https://github.com/friendlyarm/prebuilts.git -b master --depth 1
          cd prebuilts/gcc-x64
          sudo tar xvf toolchain-11.3-aarch64.tar.xz -C /

          # 找到 toolchain 基目录（兼容不同内部结构）
          TOOLCHAIN_BASE="/opt/FriendlyARM/toolchain/11.3-aarch64"
          if [ ! -d "$TOOLCHAIN_BASE" ]; then
            echo "❌ Toolchain base not found at $TOOLCHAIN_BASE"
            echo "ls /opt/FriendlyARM:"
            ls -al /opt/FriendlyARM || true
            exit 1
          fi

          # 查找第一个 bin 目录（通常在 aarch64-*-linux-gnu/bin）
          BIN_DIR=$(find "$TOOLCHAIN_BASE" -type d -name "bin" | head -n1 || true)
          if [ -z "${BIN_DIR}" ]; then
            echo "❌ Could not find bin directory under $TOOLCHAIN_BASE"
            find "$TOOLCHAIN_BASE" -maxdepth 3 -type d -print || true
            exit 1
          fi
          echo "Toolchain bin dir: $BIN_DIR"

          # 把 toolchain bin 加入 PATH（对后续 steps 生效）
          echo "$BIN_DIR" >> $GITHUB_PATH
          # 设置 CROSS_COMPILE 到 GITHUB_ENV（脚本会使用）
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV

          # 查找 bin 里实际的 gcc 前缀，比如 aarch64-cortexa53-linux-gnu-gcc
          SRC_GCC=$(find "$BIN_DIR" -maxdepth 1 -type f -name '*-gcc' | head -n1 || true)
          if [ -z "$SRC_GCC" ]; then
            echo "❌ No gcc binary found in $BIN_DIR"
            ls -lah "$BIN_DIR" || true
            exit 1
          fi
          SRC_PREFIX=$(basename "$SRC_GCC" | sed 's/-gcc$//')
          echo "Detected toolchain prefix: $SRC_PREFIX"

          # 为常用工具创建兼容的 aarch64-linux-gnu-* symlink（写到 /usr/local/bin）
          TOOLS="gcc g++ ld ar nm objcopy objdump strip ranlib readelf"
          for t in $TOOLS; do
            SRC="$BIN_DIR/${SRC_PREFIX}-$t"
            DST="/usr/local/bin/aarch64-linux-gnu-$t"
            if [ -f "$SRC" ]; then
              sudo ln -sf "$SRC" "$DST"
            else
              echo "⚠️ $SRC not found, skipping symlink for $t"
            fi
          done

          # verify
          echo "Verify aarch64-linux-gnu-gcc:"
          aarch64-linux-gnu-gcc --version || (echo "❌ aarch64-linux-gnu-gcc not found in PATH" && exit 1)

      # -------------------------
      # rootfs cache: 尝试恢复 cached_rootfs
      # -------------------------
      - name: Restore rootfs cache
        id: cache-rootfs
        uses: actions/cache@v3
        with:
          path: cached_rootfs
          key: rootfs-${{ env.ROOTFS_TGZ_ID }}-${{ runner.os }}

      - name: Prepare rootfs (restore or download)
        id: prepare-rootfs
        run: |
          set -euo pipefail
          # 如果 cache 命中，复制第一个子目录回工作区
          if [ -d "cached_rootfs" ] && [ "$(ls -A cached_rootfs || true)" ]; then
            echo "✅ rootfs restored from cache"
            EXTRACTED_PATH=$(ls -d cached_rootfs/* | head -n1)
            BASENAME=$(basename "$EXTRACTED_PATH")
            if [ -d "$BASENAME" ]; then
              echo "Workspace already contains $BASENAME, skipping copy"
            else
              cp -a "$EXTRACTED_PATH" .
            fi
            echo "rootfs_dir=$BASENAME" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 若工作区已有解压目录则直接使用
          EXISTING=$(ls -d ubuntu-focal-desktop* 2>/dev/null | head -n1 || true)
          if [ -n "$EXISTING" ]; then
            echo "✅ Found existing rootfs in workspace: $EXISTING"
            mkdir -p cached_rootfs
            cp -a "$EXISTING" cached_rootfs/
            echo "rootfs_dir=$EXISTING" >> $GITHUB_OUTPUT
            exit 0
          fi

          # cache 未命中且工作区无 rootfs，才从 Google Drive 下载并解压
          echo "⬇️ Rootfs cache miss — downloading from Google Drive (id=${ROOTFS_TGZ_ID}) ..."
          gdown "https://drive.google.com/uc?id=${ROOTFS_TGZ_ID}&export=download" -O ${ROOTFS_TGZ_FILE}
          if [ ! -f "${ROOTFS_TGZ_FILE}" ]; then
            echo "❌ Download failed: ${ROOTFS_TGZ_FILE} not found"
            exit 1
          fi
          tar xvzf ${ROOTFS_TGZ_FILE}
          EXTRACTED=$(ls -d ubuntu-focal-desktop* 2>/dev/null | head -n1 || true)
          if [ -z "$EXTRACTED" ]; then
            echo "❌ Could not find extracted rootfs directory after tar"
            ls -al
            exit 1
          fi
          mkdir -p cached_rootfs
          cp -a "$EXTRACTED" cached_rootfs/
          echo "✅ Downloaded and extracted: $EXTRACTED"
          echo "rootfs_dir=$EXTRACTED" >> $GITHUB_OUTPUT

      - name: Ensure repository root out exists
        run: |
          mkdir -p out
          ls -ld out || true

      - name: Clone sd-fuse_rk3399 and prepare sd-fuse out
        run: |
          rm -rf sd-fuse_rk3399
          git clone https://github.com/friendlyarm/sd-fuse_rk3399.git -b kernel-4.19
          mkdir -p sd-fuse_rk3399/out
          ls -lah sd-fuse_rk3399

      - name: Clone kernel
        run: |
          rm -rf kernel-rk3399
          git clone https://github.com/friendlyarm/kernel-rockchip --depth 1 -b nanopi4-v4.19.y kernel-rk3399
          if [ ! -d "kernel-rk3399/arch/arm64/boot/dts/rockchip" ]; then
            echo "❌ ERROR: Kernel DTS folder not found!"
            ls -R kernel-rk3399 || true
            exit 1
          fi
          ls -lh kernel-rk3399/arch/arm64/boot/dts/rockchip || true

      - name: Copy custom DTS
        run: |
          if [ ! -f "${CUSTOM_DTS}" ]; then
            echo "❌ ERROR: custom DTS '${CUSTOM_DTS}' not found in repo"
            ls -lah dts || true
            exit 1
          fi
          cp "${CUSTOM_DTS}" kernel-rk3399/arch/arm64/boot/dts/rockchip/
          if [ ! -f kernel-rk3399/arch/arm64/boot/dts/rockchip/$(basename ${CUSTOM_DTS}) ]; then
            echo "❌ ERROR: Custom DTS copy failed!"
            exit 1
          fi
          echo "✅ Custom DTS copied: $(basename ${CUSTOM_DTS})"

      - name: Build Kernel
        run: |
          set -euo pipefail
          echo "Using CROSS_COMPILE=${CROSS_COMPILE:-<not-set>} ARCH=${ARCH:-<not-set>}"
          cd sd-fuse_rk3399
          mkdir -p out
          KERNEL_SRC=$PWD/../kernel-rk3399 ./build-kernel.sh ../${{ steps.prepare-rootfs.outputs.rootfs_dir }}

      - name: Build Kernel headers
        run: |
          set -euo pipefail
          cd sd-fuse_rk3399
          MK_HEADERS_DEB=1 BUILD_THIRD_PARTY_DRIVER=0 KERNEL_SRC=$PWD/../kernel-rk3399 ./build-kernel.sh ../${{ steps.prepare-rootfs.outputs.rootfs_dir }}

      - name: Build U-Boot
        run: |
          set -euo pipefail
          rm -rf uboot-rockchip
          git clone https://github.com/friendlyarm/uboot-rockchip --depth 1 -b nanopi4-v2017.09 uboot-rockchip
          cd sd-fuse_rk3399
          UBOOT_SRC=$PWD/../uboot-rockchip ./build-uboot.sh ../${{ steps.prepare-rootfs.outputs.rootfs_dir }}

      - name: Build final SD image
        run: |
          set -euo pipefail
          cd sd-fuse_rk3399
          mkdir -p out
          ./mk-sd-image.sh ../${{ steps.prepare-rootfs.outputs.rootfs_dir }}
          ls -lh out || true

      - name: Upload SD image
        uses: actions/upload-artifact@v4
        with:
          name: rk3399-sd-image
          path: sd-fuse_rk3399/out/*.img
